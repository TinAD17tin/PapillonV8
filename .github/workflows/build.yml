name: Build Applications
on:
  workflow_dispatch:
    inputs:
      build_android:
        description: 'Build Android APK'
        type: boolean
        default: true
      build_ios:
        description: 'Build iOS IPA'
        type: boolean
        default: true
      sign_android:
        description: 'Sign Android APK'
        type: boolean
        default: false
      sign_ios:
        description: 'Sign iOS IPA'
        type: boolean
        default: false
      fresh_build:
        description: 'Do a fresh build (ignore caches)'
        type: boolean
        default: false

jobs:
  clean:
    runs-on: ubuntu-latest
    if: ${{ inputs.build_android || inputs.build_ios }}
    steps:
      - name: 🧹 • Clean Environment
        run: |
          if [ "${{ inputs.fresh_build }}" == "true" ]; then
            echo "Fresh build requested. Cleaning all caches."
            rm -rf node_modules
            rm -rf ~/.npm
            rm -rf ~/Library/Developer/Xcode/DerivedData || true
            rm -rf $HOME/.gradle/caches/
          fi

  # ===== ANDROID BUILD =====
  build_android:
    needs: clean
    runs-on: ubuntu-latest
    if: ${{ inputs.build_android }}
    steps:
      - uses: actions/checkout@v4

      - name: 📦 • Restore npm Cache
        if: ${{ inputs.fresh_build == false }}
        id: npm-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 • Restore Gradle Cache
        if: ${{ inputs.fresh_build == false }}
        id: gradle-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-v1

      - name: 📀 • Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: ☕ • Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 🗂️ • Install Node Dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔨 • Prebuild Android
        run: npx expo prebuild -p android --clean

      - name: 📝 • Configure Gradle Memory
        run: |
          echo "org.gradle.jvmargs=-Xmx8g -Dorg.gradle.daemon=true" >> android/gradle.properties

      - name: 🏗️ • Build Android
        run: |
          cd android
          ./gradlew assembleRelease
          cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/Papillon.apk

      - name: 🌍 • Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/Papillon.apk
          if-no-files-found: error

      - name: 📦 • Save npm Cache
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 • Save Gradle Cache
        if: always()
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-v1

  # ===== ANDROID SIGNING =====
  sign_android:
    needs: build_android
    runs-on: ubuntu-latest
    if: ${{ inputs.sign_android && inputs.build_android }}
    steps:
      ... # (inchangé)

  # ===== iOS BUILD =====
  build_ios:
    needs: clean
    runs-on: macos-latest
    if: ${{ inputs.build_ios }}
    steps:
      ... # (inchangé)

  # ===== iOS SIGNING =====
  sign_ios:
    needs: build_ios
    runs-on: macos-latest
    if: ${{ inputs.sign_ios && inputs.build_ios }}
    steps:
      ... # (inchangé)

  # ===== SUMMARY =====
  summary:
    needs: [build_android, build_ios, sign_android, sign_ios]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📋 • Build Summary
        run: |
          APP_VERSION=$(node -p "require('./package.json').version")
          COMMIT_ID=$(git rev-parse --short HEAD)

          echo "## Build Summary 📱" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📙 **App Version**: $APP_VERSION ($COMMIT_ID)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.fresh_build }}" == "true" ]; then
            echo "🆕 Fresh build: cache ignored and recreated." >> $GITHUB_STEP_SUMMARY
          else
            if [ "${{ steps.npm-cache.outputs.cache-hit }}" == 'true' ]; then
              echo "📦 npm cache: ✅ Hit" >> $GITHUB_STEP_SUMMARY
            else
              echo "📦 npm cache: ❌ Miss" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ steps.gradle-cache.outputs.cache-hit }}" == 'true' ]; then
              echo "📦 Gradle cache: ✅ Hit" >> $GITHUB_STEP_SUMMARY
            else
              echo "📦 Gradle cache: ❌ Miss" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🤖 **Android APK**:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.build_android }}" == "true" ]; then
            if [ "${{ needs.build_android.result }}" == "success" ]; then
              echo "   - 📦 Unsigned APK: ✅ Success" >> $GITHUB_STEP_SUMMARY
            else
              echo "   - 📦 Unsigned APK: ❌ Failed" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ inputs.sign_android }}" == "true" ]; then
              if [ "${{ needs.sign_android.result }}" == "success" ]; then
                echo "   - ✍️ Signed APK: ✅ Success" >> $GITHUB_STEP_SUMMARY
              else
                echo "   - ✍️ Signed APK: ❌ Failed" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "   - ✍️ Signed APK: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "   - 📦 Unsigned APK: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
            echo "   - ✍️ Signed APK: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🍎 **iOS IPA**:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ inputs.build_ios }}" == "true" ]; then
            if [ "${{ needs.build_ios.result }}" == "success" ]; then
              echo "   - 📦 Unsigned IPA: ✅ Success" >> $GITHUB_STEP_SUMMARY
            else
              echo "   - 📦 Unsigned IPA: ❌ Failed" >> $GITHUB_STEP_SUMMARY
            fi
            if [ "${{ inputs.sign_ios }}" == "true" ]; then
              if [ "${{ needs.sign_ios.result }}" == "success" ]; then
                echo "   - ✍️ Signed IPA: ✅ Success" >> $GITHUB_STEP_SUMMARY
              else
                echo "   - ✍️ Signed IPA: ❌ Failed" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "   - ✍️ Signed IPA: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "   - 📦 Unsigned IPA: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
            echo "   - ✍️ Signed IPA: ⏭️ Skipped" >> $GITHUB_STEP_SUMMARY
          fi