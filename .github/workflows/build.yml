name: Build Applications

on:
  workflow_dispatch:
    inputs:
      build_android:
        description: 'Build Android APK'
        type: boolean
        default: true
      build_ios:
        description: 'Build iOS IPA'
        type: boolean
        default: true
      sign_android:
        description: 'Sign Android APK'
        type: boolean
        default: false
      sign_ios:
        description: 'Sign iOS IPA'
        type: boolean
        default: false
      clean_cache:
        description: 'Disable all caches (slower but ensures a fresh build)'
        type: boolean
        default: false

jobs:
  # ===== CLEAN JOB =====
  clean:
    runs-on: ubuntu-latest
    if: ${{ inputs.build_android && inputs.clean_cache }}
    steps:
      - name: 🧹 • Clean Gradle Cache
        run: |
          echo "Désactivation du cache demandée. Suppression des caches Gradle."
          rm -rf $HOME/.gradle/caches/
          rm -rf node_modules

  # ===== ANDROID BUILD =====
  build_android:
    runs-on: ubuntu-latest
    if: ${{ inputs.build_android }}
    steps:
      - uses: actions/checkout@v4

      - name: 📀 • Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🗂️ • Install Node Dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔨 • Prebuild Android
        run: npx expo prebuild -p android --clean

      - name: 📦 • Cache Gradle Dependencies
        if: ${{ !inputs.clean_cache }}
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: ☕ • Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 📝 • Configure Gradle Memory (Optimisation)
        run: echo "org.gradle.jvmargs=-Xmx8g -Dorg.gradle.daemon=true -Dorg.gradle.parallel=true" >> android/gradle.properties

      - name: 🏗️ • Build Android
        run: |
          cd android
          ./gradlew assembleRelease --parallel
          cp app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/Papillon.apk

      - name: 🌍 • Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: android/app/build/outputs/apk/release/Papillon.apk
          if-no-files-found: error

  # ===== ANDROID SIGNING =====
  sign_android:
    runs-on: ubuntu-latest
    needs: build_android
    if: ${{ inputs.sign_android && inputs.build_android }}
    steps:
      - name: 🔍 • Check Android Signing Secrets
        id: check_secrets
        run: |
          if [[ -z "${{ secrets.ANDROID_KEYSTORE }}" || \
                -z "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" || \
                -z "${{ secrets.ANDROID_KEY_PASSWORD }}" || \
                -z "${{ secrets.ANDROID_KEY_ALIAS }}" ]]; then
            echo "❌ Missing Android signing secrets."
            echo "secrets_available=false" >> $GITHUB_OUTPUT
            echo "## ⚠️ Android Signing Failed" >> $GITHUB_STEP_SUMMARY
            echo "Missing required secrets for Android signing." >> $GITHUB_STEP_SUMMARY
            echo "**Required:** ANDROID_KEYSTORE, ANDROID_KEYSTORE_PASSWORD, ANDROID_KEY_PASSWORD, ANDROID_KEY_ALIAS" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Android signing secrets are available."
            echo "secrets_available=true" >> $GITHUB_OUTPUT
          fi

      - name: ☕ • Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: 📥 • Download Unsigned APK
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: ./

      - name: 🔐 • Setup Android Signing
        run: echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > release.keystore

      - name: ✍️ • Sign Android APK
        run: |
          $ANDROID_HOME/build-tools/$(ls $ANDROID_HOME/build-tools | tail -1)/apksigner sign \
            --ks release.keystore \
            --ks-key-alias "${{ secrets.ANDROID_KEY_ALIAS }}" \
            --ks-pass pass:"${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            --key-pass pass:"${{ secrets.ANDROID_KEY_PASSWORD }}" \
            --out Papillon-signed.apk \
            Papillon.apk

          $ANDROID_HOME/build-tools/$(ls $ANDROID_HOME/build-tools | tail -1)/apksigner verify Papillon-signed.apk

      - name: 🌍 • Upload Signed APK
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-signed
          path: Papillon-signed.apk
          if-no-files-found: error

  # ===== iOS BUILD =====
  build_ios:
    runs-on: macos-latest
    if: ${{ inputs.build_ios }}
    steps:
      - uses: actions/checkout@v4

      - name: 📀 • Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 🗂️ • Install Node Dependencies
        run: npm ci --legacy-peer-deps

      - name: 🔨 • Prebuild iOS
        run: npx expo prebuild -p ios --clean

      - name: 🏗️ • Build iOS
        run: |
          cd ios
          xcodebuild -workspace Papillon.xcworkspace \
                     -scheme Papillon \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -derivedDataPath ./build \
                     IPHONEOS_DEPLOYMENT_TARGET=15.1 \
                     CODE_SIGN_STYLE=Manual \
                     CODE_SIGNING_ALLOWED=NO \
                     CODE_SIGN_IDENTITY="" \
                     ENABLE_USER_SCRIPT_SANDBOXING=NO

      - name: 📦 • Bundle IPA
        run: |
          cd ios
          mkdir -p build
          mkdir -p Payload
          cp -r build/Build/Products/Release-iphoneos/Papillon.app Payload/
          zip -r Papillon.ipa Payload
          mv Papillon.ipa build/Papillon.ipa
          rm -rf Payload

      - name: 🌍 • Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: ios/build/Papillon.ipa
          if-no-files-found: error

  # ===== iOS SIGNING =====
  sign_ios:
    runs-on: macos-latest
    needs: build_ios
    if: ${{ inputs.sign_ios && inputs.build_ios }}
    steps:
      - name: 🔍 • Check iOS Signing Secrets
        id: check_secrets
        run: |
          if [[ -z "${{ secrets.IOS_CERTIFICATE_P12 }}" || \
                -z "${{ secrets.IOS_CERTIFICATE_PASSWORD }}" ]]; then
            echo "❌ Missing iOS signing secrets."
            echo "secrets_available=false" >> $GITHUB_OUTPUT
            echo "## ⚠️ iOS Signing Failed" >> $GITHUB_STEP_SUMMARY
            echo "Missing required secrets for iOS signing." >> $GITHUB_STEP_SUMMARY
            echo "**Required:** IOS_CERTIFICATE_P12, IOS_CERTIFICATE_PASSWORD" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ iOS signing secrets are available."
            echo "secrets_available=true" >> $GITHUB_OUTPUT
          fi

      - name: 📥 • Download Unsigned IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa
          path: ./

      - name: 🔐 • Setup iOS Signing
        run: |
          echo "${{ secrets.IOS_CERTIFICATE_P12 }}" | base64 --decode > certificate.p12
          KEYCHAIN_PASSWORD="temp-build-$(date +%s)"
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security